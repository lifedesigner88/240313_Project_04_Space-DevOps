name: Deploy to Ec2 with Jar

on:
  push:
    branches:
      - backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        working-directory: ./Space_Backend
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

# ******************************************* 1번쨰 EC2 *************************************************

      - name: ------- Copy jar to first server ec2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./Space_Backend/build/libs/*.jar"
          target: "/home/${{ secrets.EC2_USERNAME }}"


      - name: pull and run Redis if not exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            if ! sudo docker ps | grep some-redis; then 
              sudo docker pull redis
              sudo docker run --name some-redis -p 6379:6379 -d redis
            fi

      - name: Install java and run jar on ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! type java > /dev/null; then
              sudo apt update && sudo apt install openjdk-17-jdk -y
            else
              echo "java is already installed"
            fi
            sudo killall java || true
            nohup java -jar /home/${{ secrets.EC2_USERNAME }}/Space_Backend/build/libs/*.jar \
            --spring.datasource.url=jdbc:mariadb://${{ secrets.DB_HOST }}:3306/encorespace \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
            --spring.mail.password=${{ secrets.MAIL_KEY }} \
            --spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_KEY }}  \
            --spring.security.oauth2.client.registration.github.client-secret=${{ secrets.OAUTH_GITHUB_KEY }}  \
            > /home/${{ secrets.EC2_USERNAME }}/app.log 2>&1 &

# ******************************************* 2번쨰 EC2 ************************************************

      - name: ------- Copy jar to Second server ec2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./Space_Backend/build/libs/*.jar"
          target: "/home/${{ secrets.EC2_USERNAME }}"

      - name: pull and run Redis if not exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            if ! sudo docker ps | grep some-redis; then 
              sudo docker pull redis
              sudo docker run --name some-redis -p 6379:6379 -d redis
            fi

      - name: Install java and run jar on ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! type java > /dev/null; then
              sudo apt update && sudo apt install openjdk-17-jdk -y
            else
              echo "java is already installed"
            fi
            sudo killall java || true
            nohup java -jar /home/${{ secrets.EC2_USERNAME }}/Space_Backend/build/libs/*.jar \
            --spring.datasource.url=jdbc:mariadb://${{ secrets.DB_HOST }}:3306/encorespace \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
            --spring.mail.password=${{ secrets.MAIL_KEY }} \
            --spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_KEY }}  \
            --spring.security.oauth2.client.registration.github.client-secret=${{ secrets.OAUTH_GITHUB_KEY }}  \
            > /home/${{ secrets.EC2_USERNAME }}/app.log 2>&1 &
