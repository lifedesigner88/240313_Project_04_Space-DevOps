name: CI/CD

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: space_backend

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./Space_Backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

# *********************************** EC2 first ***********************************

      - name: pull and run Redis if not exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            if ! sudo docker ps | grep some-redis; then 
              sudo docker pull redis
              sudo docker network create my-network
              sudo docker run --name some-redis --network my-network -p 6379:6379 -d redis
            fi

      - name: ec2 ssh login and docker run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! type docker > /dev/null ; then
              curl -s https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            sudo docker rm -f ${{ env.IMAGE_NAME }} || true
            sudo docker image prune -f

            sudo docker run -d --name ${{ env.IMAGE_NAME }} --network my-network -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:mariadb://${{ secrets.DB_HOST }}:3306/encorespace \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SPRING_MAIL_PASSWORD=${{ secrets.MAIL_KEY }} \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_KEY }} \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_KEY }} \
            -e CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} \
            -e CLOUD_AWS_CREDENTIALS_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            

# *********************************** EC2 second ***********************************


      - name: pull and run Redis if not exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            if ! sudo docker ps | grep some-redis; then 
              sudo docker pull redis
              sudo docker network create my-network
              sudo docker run --name some-redis --network my-network -p 6379:6379 -d redis
            fi

      - name: ec2 ssh login and docker run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! type docker > /dev/null ; then
              curl -s https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            sudo docker rm -f ${{ env.IMAGE_NAME }} || true
            sudo docker image prune -f

            sudo docker run -d --name ${{ env.IMAGE_NAME }} --network my-network -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:mariadb://${{ secrets.DB_HOST }}:3306/encorespace \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SPRING_MAIL_PASSWORD=${{ secrets.MAIL_KEY }} \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_KEY }}  \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_KEY }} \
            -e CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} \
            -e CLOUD_AWS_CREDENTIALS_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
